// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Page {
  id           String   @id @default(cuid())
  slug         String   @unique
  title        String
  headContent  String?  // Contenuto del <head> 
  blocks       Block[]
  published    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Block {
  id          String      @id @default(cuid())
  type        String      // Nome del blocco (es. "hero", "bio")
  htmlContent String      // HTML completo del blocco
  order       Int         // Ordine nella pagina
  draggable   Boolean     @default(false) // Se il blocco pu√≤ essere riordinato
  pageId      String
  page        Page        @relation(fields: [pageId], references: [id], onDelete: Cascade)
  fields      BlockField[] // Campi editabili del blocco

  @@map("blocks")
}

model BlockField {
  id          String @id @default(cuid())
  fieldName   String // Nome del campo (es. "hero-1", "main_title")
  displayName String // Nome mostrato nell'admin (es. "Titolo principale")
  fieldType   String // "text", "textarea", "image", "link"
  value       String // Valore del campo
  blockId     String
  block       Block  @relation(fields: [blockId], references: [id], onDelete: Cascade)

  @@map("block_fields")
}

model User {
  id       String    @id @default(cuid())
  email    String    @unique
  password String?
  name     String?
  accounts Account[]
  sessions Session[]
}

model Settings {
  id    String @id @default(cuid())
  key   String @unique
  value String

  @@map("settings")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
